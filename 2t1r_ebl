# Create KLayout object
import pya
import os
import re



all_cells="/Users/Henry Mackay/Desktop/EBL_2T1R_cells.gds"
font="/Users/Henry Mackay/Documents/1T1R_UPDATE/Large_Placement/block_via_font.gds"
output="/Users/Henry Mackay/Desktop/layout/2T1R_EBL_tiled.gds"

created_containing_cell_name="2T1R_EBL_placed_transistors"


#Displacemet vectors for cross instances

#Displacemet vectors for cross instances
cross0_dx=17.6*1000
cross0_dy=-17.25*1000

cross1_dx=0
cross1_dy =(-10.50827)*1000


cross2_dx=-17.6*1000
cross2_dy=(-.735+.6726118+.002)*1000

#length and width of subcell in um 
l=16.6
w=200
#calculated pitch
x_pitch=l*1000
y_pitch=w*1000


#Gap between tiled subcells
x_gap=480*1000
y_gap=(84.1459+1.6)*1000


#Gap between bottom of cell and top of text 
text_x_gap=0
text_y_gap=(69.61+1.74+.0005+1.6)*1000


#helper variables for placement 
dx=0
dy=0
nx=0
ny=0

move_cross=True
add_text=True


#number of tiles placed across and down
num_t_across=7


#size of placed text
txt_size=16



#helper function used to extract parameters from subcells
def find_between(text, first, last):
  start = text.find(first) + len(first)
  end = text.find(last, start)
  return str(text[start:end]) if start != -1 and end != -1 else None




KLAYOUT = pya.Layout()


# Create Top Cell Name & Obj of the GDS to be EXPORTED
TOP_CELL = KLAYOUT.create_cell(created_containing_cell_name)


KLAYOUT.read(all_cells)
#  # Read Top Cell for each GDS file

counter=0

for top_cell_read in KLAYOUT.top_cells():

    if (top_cell_read.name != created_containing_cell_name): # Don't insert TOP_CELL on itself
        counter=counter+1
        cell_index = top_cell_read.cell_index()
        
        
        if (nx == num_t_across):
          nx=0
          dx=0
          dy=dy-y_gap
          
        dx=dx+x_gap
        nx=nx+1
   # cross1_dx=0
    #cross1_dy=0
    #cross0_dx=0
     
    if (move_cross):
    

     # print(cross1_dx,cross1_dy)
      #print(cross0_dx,cross0_dy)
      cross0_trans = pya.Trans(pya.Vector(0,0), pya.Vector(cross0_dx,cross0_dy))
      cross1_trans = pya.Trans.new(pya.Point(cross1_dx,cross1_dy))
      cross2_trans = pya.Trans(pya.Vector(0,0), pya.Vector(cross2_dx,cross2_dy))
  
      #iterate  through all subcells looking for cross
      #Can be used to move any child cells, not just cross
      for inst in  top_cell_read.each_inst():
        cell_n=KLAYOUT.cell(inst.cell_index).name
        #cell_n=cel_in  
        #print(top_cell_read.name)
                       
        if cell_n.find("Cross") != -1:
        
          if cell_n.find("$1$") != -1:
            inst.transform(cross1_trans)
         
            #print("BOOM")
            
          if cell_n.find("$2$") != -1:
            inst.transform(cross2_trans)
            
          if cell_n.count("$") == 1:
            
            inst.transform(cross0_trans)
          
        #place one cell
        
        new_instance = pya.CellInstArray( cell_index, pya.Trans(pya.Vector(dx,dy)), pya.Vector(x_pitch, 0), pya.Vector(0, y_pitch), 1, 0 )

        TOP_CELL.insert( new_instance)
                  
                  
   

        
        if (add_text):
          name=top_cell_read.name
        
          #Based on file naming convention of transistor gds files, used to get parameters
          width = find_between(name,"_w","_l")
          length = find_between(name,str(width)+"_l","_")
          voltage=find_between(name,"l" + str(length) + "_","_ebl")
          
          lum_lib_txt = "2T1R W" + str(width) + " L" + str(length) +  " " + voltage

          #Layer text is to be placed on 
          txt_layer = pya.LayerInfo(255, 0)
          KLAYOUT.layer(txt_layer)
          
          
          #Instantiate and create text pcell

          param  = { "layer": txt_layer, "text": lum_lib_txt, "mag": txt_size }
          txtcell = KLAYOUT.create_cell("TEXT", "Basic", param)
         
          text_trans = pya.Trans(0, False, dx-text_x_gap, dy+text_y_gap)
          TOP_CELL.insert(pya.CellInstArray.new(txtcell.cell_index(), text_trans))
          


 
          
# Create layer #'s
outline = KLAYOUT.layer(4, 10) # 3x3 Outline

# Draw outline of all cells
#TOP_CELL.shapes(outline).insert( pya.Box(0, 0, 14.5*x_pitch-1000+792, 4.7*y_pitch+6.664*1000) ) 

# Export GDS
KLAYOUT.write(output)
